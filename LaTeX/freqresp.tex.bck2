%=============================================================================
% ..... THIS IS chapter{FREQRESP: ITU-T frequency response measure tool } .....
%
% ... Authors :
%        Cyril Guillaumé & Stéphane Ragot - stephane.ragot@francetelecom.com
%
%=============================================================================
\chapter{ITU-T frequency response measurement tool}
%=============================================================================

%----------------------------------------------------------------------
\section{Introduction}
%----------------------------------------------------------------------

In order to measure effective codec bandwidth, a frequency response 
measurement tool was created for the STL2005 \cite{STL2005}. At Q10/16 January 2008 
meeting, a window overlap option was proposed to make this tool more 
accurate when dealing with signals with quickly varying frequencies 
while allowing the tool to be used as before \cite{AC-0801-Q10-31} and it was wondered whether this window overlap option should be the default mode. At this January 2008 meeting \cite{TD297R1}, it was also suggested that an option to use other window sizes might be useful. In addition, during G.729.1 Superwideband qualification phase, it was found that the speed of the algorithm can be sometime a bit too slow. Therefore, at Q10/16 September 2008 meeting, an update was provided to allow variable frame size usage and to increase the computation speed \cite{AC-0809-Q10-35}. 

%----------------------------------------------------------------------
\section{Description of the algorithm}
%----------------------------------------------------------------------

An input signal is encoded and decoded by the Codec under Test. The
periodogram method is then used to compute the average amplitude
spectrum difference between a reference signal (e.g. the input file to
the speech codec) and a test signal (e.g. the speech signal after
encoding and decoding by a codec).

The input and output signals can be treated on a frame by frame basis,
among a fixed frame length of 2048 samples or among a various length
frame of the size is a power of 2. A Hanning window is applied to each
input and output frame. The resulting windowed signals are transformed
to the frequency domain using a various number of point Fast Fourier
transform. The input and output amplitude spectra are then computed
and averaged. This tool produces the average amplitude spectrum in
ASCII and also produces a bitmap file.

SG 12 has recommended as input signal the Rec. ITU-T \textbf{P.50 test
  signals} (p50\_m.16p for male voices, and p50\_f.16p for female
voices) which are representative of speech signals. %
However, in general it is nearly impossible to use speech or speech
like signals as defined in Rec. P.50 for the measurement of fullband
systems. Due to the human voice generation process the signal energy
produced in the frequency range above 8 kHz is negligible and clearly
insufficient for the characterisation of fullband systems, the SNR of
any measurement using such signals is too weak in the low and high
frequency range.

The only speech-like fullband test signal currently available in the
ITU-T Recommendations is the Composite Source (CS) Signal as defined
in Rec. ITU-T P.501. This is the only test signal which provides
sufficient energy in the frequency range above 8~kHz and below 100~Hz
to reliably measure the frequency response characteristics of fullband
systems. However, due to the simplified nature of the signal it may
not be properly transmitted by new speech coders.

However, SG12 believes that due to the observations made above the new
codecs to be evaluated should be able to transmit other signals than
speech only, especially signals with a higher bandwidth than
speech. Based on this assumption, it is recommended (besides the use
of the wideband CS-Signal) the following approach for testing fullband
systems:

\begin{enumerate}

\item \textcolor{green}{
  In case the CS-signal cannot be used it is recommended to use
  artificial voice according to ITU-T Rec. P.50 and mix it with a
  broadband pink noise signal. The mixing should be 50\%/50\%. This
  would simulate a situation of speech in (wideband) background
  noise. Before deriving the frequency response characteristics by
  using this signal the coded signal should be evaluated subjectively
  by expert listeners. If the coded signal does not sound distorted it
  can be assumed that the signal was transmitted as intended and can
  be used for the determination of the frequency response
  characteristics of the system under test.
}

\item \textcolor{green}{
  If the signal sounds distorted replace the artificial voice
  signal by a voice signal consisting off speech sentences (2
  sentences, 2male, 2 female talkers each). Appropriate speech samples
  can be found in Rec. ITU-T P.501.
}

\item \textcolor{green}{
  If this does not lead to the desired result replace the pink
  noise by a broadband background noise signal providing as much
  energy as possible in the high frequency range. Appropriate
  background noises can be found e.g. in Rec. ITU-T P.501 or ETSI EG
  202 396-1.
}

\item \textcolor{green}{
  Codecs intended to transmit music could be tested with a
  fullband music signal. Again care should be taken to provide
  sufficient energy in the high and low frequency range. Currently
  there are no music signals available in ITU-T Recommendations so it
  is up to the testlabs to select an appropriate music sequence.
}
\end{enumerate}

\subsection{Discrete Fourier Transform (DFT)}

The spectrum is computed using the Discrete Fourier Transform (for
real signals). This is performed as follows :
\[
    X(f)=\sum^{NFFT-1}_{k=0}x(k)\cdot \cos{(2\pi fk)} - j\cdot \sum^{NFFT-1}_{k=0}x(k)\cdot \sin{(2\pi fk)}
\]
where \emph{NFFT} is the number of DFT coefficients.
\subsection{Hanning window generation (DFT)}

The hanning window of length n is defined as :
\[
    hanning(k)=0.5\cdot [1-\cos(2\pi \cdot \frac{k+1}{n+1})] \mbox{\rule{15mm}{0mm}} (0 \le k \le n-1)
\]

\subsection{Variable frame size}

Previously, the window size used for Fourier transform was fixed to 2048 samples. This fixed size did not allow choosing the frequency resolution. In order to solve this problem, a variable window's size has been implemented. The use of a Fast Fourier Transform implies that the window's size is a power of 2. So the available sizes are 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 and 8192 (the max length of FFT is defined by the macro "NFFT\_MAX" and is set to 8192). The dimensions of the bitmap file created by the tool (with option -bmp) are adapted to the new variable size: if the size is inferior to 2048, then the bitmap file keeps the same dimensions as for a 2048-sample bitmap file (smaller dimensions would give unreadable figures). For sizes superior to 2048, the bitmap dimensions are increased to show the details brought by the better frequency resolution.\\
The syntax needed for using the variable size is following:\\
{\tt freqresp.exe -nfft 4096 FileInpCodec FileOutCodec ASCIIout}\\
If the -nfft option is not used, then the default size (2048) is used. The other usual options (e.g. sampling frequency,\ldots) can still be set.
Following figures show the bitmap files obtained after applying the {\tt freqresp} tool with 256, 2048 and 8192 samples. The input file used for this test is the artificial female voice standardized by ITU in \cite{P.50}.

\newpage

%------------------------------------------------------------------------
\begin{figure}[!hbp]
  \begin{center}
    \includegraphics[scale=0.25]{femaleVoice256}
  	\caption{P.50 female voice analyzed with a 256-sample window\label{femaleVoice256}}
  \end{center}
\end{figure}
\begin{figure}[!hbp]
  \begin{center}
    \includegraphics[scale=0.25]{femaleVoice2048}
  	\caption{P.50 female voice analyzed with a 2048-sample window\label{femaleVoice2048}}
  \end{center}
\end{figure}
\begin{figure}[!hbp]
  \begin{center}
    \includegraphics[scale=0.065]{femaleVoice8192}
	  \caption{P.50 female voice analyzed with a 8192-sample window\label{femaleVoice8192}}
  \end{center}
\end{figure}
%------------------ End of figure ----------------------------------

\subsection{Computation optimization}

During the G.729.1 SWB extension qualification phase it was found out that the time needed for computing the frequency response of a long audio file can be rather long. In order to speed up the computation it is proposed to replace the Discrete Fourier Transform (DFT) with a split radix (4,2) Fast Fourier Transform (FFT) algorithm. For more explanation on the split radix algorithm\footnote{Split-radix FFT algorithm, http:\/\/en.wikipedia.org\/wiki\/Split-radix\_FFT\_algorithm}.\\
On a file of about 14 Mbytes, here are the computation times obtained with the default frame size:
\begin{itemize}
\item Current DFT: about 37 minutes
\item FFT algorithm: about 1.5 seconds
\end{itemize}
The code modification can be seen in the attached zip file, the modifications are activated by defining TUNED\_FFT.\\
When this option is activated the frame size is limited to power of 2 values (16-32-64-128-256-512-1024-2048-4096-8192).\\
% Here is the frequency response obtained with the fast algorithm and the following command line:\\
% {\tt freqresp.exe -fs 32000 -bmp long \_fast.bmp -fmin 100 -fmax 16000 -fstep 100 long.pcm long.raw long\_fast.txt}

%------------------------------------------------------------------------
% \begin{figure}[!hbp]
%   \begin{center}
%     \includegraphics[scale=0.35]{withoutTUNEDFFT}
%   	\caption{When TUNED\_FFT is not activated the following frequency response is obtained:\label{withoutTUNEDFFT}}
%   \end{center}
% \end{figure}
% \begin{figure}[!htp]
%   \begin{center}
%     \includegraphics[scale=0.35]{withTUNEDFFT}
% 	  \caption{The activation of TUNED\_FFT does not seem to have impact on the frequency response\label{withTUNEDFFT}}
%   \end{center}
% \end{figure}
%------------------ End of figure ----------------------------------

%----------------------------------------------------------------------
\section{Implementation}
%----------------------------------------------------------------------

%-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
\subsection{\tt rdft}

{\bf Syntax: }

{\tt
\#include "fft.h"\\
void rdft \ttpbox{110mm}{(int {\em NFFT}, float* {\em x1}, float*
{\em x2}, float* {\em y2}); }}

{\bf Prototype: }    fft.h

{\bf Description: }

This routine computes the positive part of the spectrum, using
Real Discrete Fourier Transform.

{\bf Variables: }
\begin{Descr}{\DescrLen}
\item[\pbox{20mm}{\em NFFT}] %%\rulex{1mm}\\
        number of coefficients of the fourier transform;

\item[\pbox{20mm}{\em x1}] %%\rulex{1mm}\\
        input real signal;

\item[\pbox{20mm}{\em x2}] %%\rulex{1mm}\\
        output real part of the Fourier Transform;

\item[\pbox{20mm}{\em y2}] %%\rulex{1mm}\\
        output imaginary part of the Fourier Transform;
\end{Descr}


%-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
\subsection{\tt genHanning}

{\bf Syntax: }

{\tt
\#include "fft.h"\\
void genHanning \ttpbox{110mm}{(int {\em n}, float* {\em
hanning}); }}

{\bf Prototype: }    fft.h

{\bf Description: }

This routine generates a hanning window.

{\bf Variables: }
\begin{Descr}{\DescrLen}
\item[\pbox{20mm}{\em n}] %%\rulex{1mm}\\
        number of coefficients of the hanning window;

\item[\pbox{20mm}{\em hanning}] %%\rulex{1mm}\\
        buffer containing the coefficients of the hanning window;
\end{Descr}

%-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
\subsection{\tt powSpect}

{\bf Syntax: }

{\tt
\#include "fft.h"\\
void powSpect \ttpbox{110mm}{(float* {\em real}, float* {\em
imag}, float* {\em pws}, int {\em n}); }}

{\bf Prototype: }    fft.h

{\bf Description: }

This routine computes the power spectrum of the DFT of a signal.

{\bf Variables: }
\begin{Descr}{\DescrLen}
\item[\pbox{20mm}{\em real}] %%\rulex{1mm}\\
        input buffer containing the real part of the DFT;

\item[\pbox{20mm}{\em imag}] %%\rulex{1mm}\\
        input buffer containing the imaginary part of the DFT;

\item[\pbox{20mm}{\em pws}] %%\rulex{1mm}\\
        output buffer containing the power spectrum;

\item[\pbox{20mm}{\em n}] %%\rulex{1mm}\\
        length of the input buffers;
\end{Descr}

%-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
\subsection{Tests and portability}

Compiled and tested on a PC (Windows) platform with MS Visual C++
6.0.

%----------------------------------------------------------------------
\section{Example code}
%----------------------------------------------------------------------

A demonstration program, {\em freqresp.c} illustrates the use of
this module to compute the average power spectrum of two signals
(input and output of the codec).
