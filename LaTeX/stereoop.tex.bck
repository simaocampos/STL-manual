%=============================================================================
% ..... THIS IS chapter{Stereoop } .....
%=============================================================================
\chapter{ITU-T Stereo processing tool}
%=============================================================================

\section{Introduction}

For the development and or characterization of stereo algorithms, the algorithms being developed or characterized require properly conditioned stereo signals. To be able to reuse the existing set of STL single-channel processing tools for conditioning the inputs and outputs in a stereo processing chain a generic stereo operations tool has been developed. This stereo processing tool provides the basic functionalities of interleaving single channel files, splitting stereo files into single channel files, and creating specific single channel downmix signals from a given stereo input.

\section{Description of the algorithm}

The tool operates on sample basis on 16 bits/sample input files, and provides the following functionalities:

\begin{itemize}
\item interleaving two single channel files into one single two-channel stereo file.
\item splitting an interleaved two-channel file into individual single channel files
\item down-mixing a two-channel stereo file into a maximum channel energy analysis file 
	  (a single channel analysis signal for stereo scene level evaluation purposes).
\item down-mixing a two-channel file into a single channel mono file
\end{itemize}

Figure \ref{fig:stereoopFig1} illustrates the functionality that provides interleaving two single channel files into one single two-channel stereo file. Figure \ref{fig:stereoopFig2} illustrates the functionality that provides splitting an interleaved two-channel file into individual single channel files. Figure \ref{fig:stereoopFig3} illustrates the functionality that provides down-mixing a two-channel file into a maximum channel energy analysis file. Figure \ref{fig:stereoopFig4} illustrates the functionality that provides down-mixing a two-channel file into a single channel mono file.

\begin{figure}[hbtp]
    \begin{center}
        \includegraphics{stereoopFig1}
  \end{center}
  \caption{Interleaving of two single channel files into one single two-channel stereo file.
           \label{fig:stereoopFig1} }
\end{figure}

\begin{figure}[hbtp]
    \begin{center}
        \includegraphics{stereoopFig2}
  \end{center}
  \caption{Splitting an interleaved two-channel file into two individual single channel files.
           \label{fig:stereoopFig2} }
\end{figure}

\begin{figure}[hbtp]
    \begin{center}
        \includegraphics{stereoopFig3}
  \end{center}
  \caption{Down-mixing a two-channel file into a maximum channel energy analysis file.
           \label{fig:stereoopFig3} }
\end{figure}

\begin{figure}[hbtp]
    \begin{center}
        \includegraphics{stereoopFig4}
  \end{center}
  \caption{Down-mixing a two-channel file into a single channel mono file.
           \label{fig:stereoopFig4} }
\end{figure}

This set of stereo operation functionalities, in combination with the existing STL tools (that can be applied on the single channel files), provides a generic framework for stereo file processing.

\section{Implementation}

\subsection{Data and file format}
The tool works on 16 bit sample data (short), independently of sampling frequency, 
(it is assumed that left and right channels always have the same sampling frequency). 

File format: 2-channel data is stored in raw header less files, with each left channel sample stored before the corresponding right channel sample. Single channel files are stored in raw headerless files (as required by most existing STL single channel tools). 

The input and output file byte order will be the native system byte order.

\subsection{stereoop module}

\subsubsection{Prototype}

{\tt
\#include "ugstdemo.h"\\
enum Mode{ NONE = -1,INTER, SPLIT, LEFT, RIGHT, MAXENVAL, MONO, N\_MODES };\\
int main (int argc, char *argv[]);
}

\subsubsection{Description}

The main function opens the input file (or files) and processes them according to a stereo operation option given on the command line and stores the processed data into the output file (or files). 

\subsubsection{Variables}

{\tt
FILE   *Fif[MAX\_IFILES];	/* Pointer(s) to input files */ \\
FILE   *Fof[MAX\_OFILES];     	/* Pointer(s) to output files */ \\
char   ifname[MAX\_IFILES][MAX\_STR];	/* Input file names */ \\
char   ofname[MAX\_OFILES][MAX\_STR];	/* Output file names */ \\
enum   Mode mode=NONE; 	/* Operation mode variable */ \\
short  tmp\_short[2],tmp\_short\_1ch[1];	/* 16bit short read/write buffers */ \\
}

\subsubsection{Command line syntax for channel manipulation operations}

{\tt
\begin{tabular}{lllll}
stereoop & -interleave & infile.L.1ch      & infile.R.1ch  & outfile.stereo.2ch \\ 
stereoop & -split      & infile.stereo.2ch & outfile.L.1ch & outfile.R.1ch \\ 
stereoop & -left       & infile.stereo.2ch & outfile.L.1ch &  \\ 
stereoop & -right      & infile.stereo.2ch & outfile.R.1ch &  \\ 
\end{tabular} 
}

\subsubsection{Command line syntax for channel down-mix operations}

{\tt
\begin{tabular}{lllll}
stereoop & -maxenval & infile.stereo.2ch & outfile.maxenval.1ch  &  \\ 
stereoop & -mono     & infile.stereo.2ch & outfile.mono.1ch &  \\ 
\end{tabular} 
}

\subsubsection{"stereoop -maxenval" detailed operation}

The pseudo code below shows the tool operation when creating the maximum channel energy downmix, a downmix that may be used for stereo scene level evaluation purposes. The left or right sample value yielding the maximum absolute value (which equals the value yielding maximum energy) is written to the output file. 

Pseudo code
\newline

{\tt
[left, right] = ReadSamples(InputStereoChannelFile);

if( |left| > |right|){
  output = left;
} else {
  output = right;
}

WriteSample(OutputSingleChannelFile, output);
}

\subsubsection{"stereoop -–mono" detailed operation}
The pseduo code below shows the tool operation when creating the mono downmix. The output sample mono  value is is (left + right) / 2.0, (truncated to a short  value). 

Pseudo code
\newline

{\tt
[left, right] = ReadSamples(InputStereoChannelFile);

output = (short)((double)left + double(right))/2.0;

WriteSample(OutputSingleChannelFile, output);
}


\section{Tests and Portability}

The stereoop tool example code has been evaluated under Win2000/Cygwin(CYGWIN\_NT-5.0, v1.5.24/gcc(3.4.4), Linux (2.6.5-7.145)/gcc(2.95.3) and Solaris(SunOS Generic\_122300-02)/gcc(2.95.3).

\section{Example code}

A demonstration program, {\tt stereoop.c} implements the described operations of the tool.
